#!/usr/bin/env python3

# Title: raspberrypi-internet-monitor
# Description: Blinking GPIO output when a live internet connection is present
# Author: William Chanrico
# Date: 27-October-2016

import sys
import signal
import socket
import argparse
from time import sleep

import RPi.GPIO as GPIO


def signal_term_handler():
    """ SIGTERM handler """
    sys.exit(0)


def internet(host="8.8.8.8", port=53, timeout=3):
    """ Returns True if connected to the internet """
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))

        return True

    except:
        print(sys.exc_info())

        return False


def header():
    """ Prints header """
    print(" _____________________ 	")
    print("/ hello, who's there? \\	")
    print("\\ william said hi...  /	")
    print(" ---------------------	")
    print("       \\   ,__,			")
    print("        \\  (..)____		")
    print("           (__)    )\	")
    print("              ||--|| *	")


def main(args):
    """ Main entry point """
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(args.GPIO_NUM, GPIO.OUT)

    header()

    try:
        print("Process started")
        print(
            "GPIO{} pin will outputs on and off while an internet connection "
            "is present".format(args.GPIO_NUM))

        while True:
            if internet() is True:
                GPIO.output(args.GPIO_NUM, True)
                sleep(2)

                GPIO.output(args.GPIO_NUM, False)
                sleep(1)

        print("Process has stopped running")

    except KeyboardInterrupt:
        print("Interrupt signal received!\n")

    except:
        print("Program terminatted by unknown cause!\n")

    finally:
        GPIO.cleanup()

        print("GPIO cleaned up!\n")


if __name__ == "__main__":
    signal.signal(signal.SIGTERM, signal_term_handler)

    PARSER = argparse.ArgumentParser()
    PARSER.add_argument(
        "GPIO_NUM",
        help="The GPIO output pin number you want to use",
        type=int)

    ARGS = PARSER.parse_args()
    main(ARGS)
